nnoremap <Leader>sv :RelatedSpecVOpen<CR>

if !has("gui_running")
  autocmd FileType ruby nnoremap <Leader>sl :call Send_to_Tmux(SpringRSpecLine() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>ss :call Send_to_Tmux(SpringRSpec() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>rl :call Send_to_Tmux(RSpecLine() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>rs :call Send_to_Tmux(RSpec() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>smt :call Send_to_Tmux(Minitest() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>sml :call Send_to_Tmux(MinitestLine() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>zl :call Send_to_Tmux(ZeusRSpecLine() . "\n")<CR>
  autocmd FileType ruby nnoremap <Leader>zs :call Send_to_Tmux(ZeusRSpec() . "\n")<CR>

  autocmd FileType elixir nnoremap <Leader>smt :call Send_to_Tmux(MixTest() . "\n")<CR>
  autocmd FileType elixir nnoremap <Leader>sml :call Send_to_Tmux(MixTestLine() . "\n")<CR>

  nnoremap <Leader>st :call TextToTmux()<CR>
  set background=light

  nnoremap <C-t>n :tabnew<CR>
  nnoremap <C-t>1 :tabn 1<CR>
  nnoremap <C-t>2 :tabn 2<CR>
  nnoremap <C-t>3 :tabn 3<CR>
  nnoremap <C-t>4 :tabn 4<CR>
  nnoremap <C-t>5 :tabn 5<CR>
  nnoremap <C-t>6 :tabn 6<CR>
  nnoremap <C-t>7 :tabn 7<CR>
  nnoremap <C-t>8 :tabn 8<CR>
  nnoremap <C-t>9 :tabn 9<CR>
endif

xnoremap <leader>cp <esc>:'<,'>:w !pbcopy<CR>

autocmd BufWritePre * :StripTrailingWhitespaces
autocmd BufNewFile,BufRead *.md setlocal wrap
autocmd BufRead,BufNewFile *.md setlocal spell

function TextToTmux()
  call inputsave()
  let a:command = input("Enter command: ")
  call inputrestore()
  call Send_to_Tmux(a:command . "\n")
endfunction

let g:xmpfilter_cmd = "seeing_is_believing"

autocmd FileType ruby nmap <buffer> <C-x>m <Plug>(seeing_is_believing-mark)
autocmd FileType ruby xmap <buffer> <C-x>m <Plug>(seeing_is_believing-mark)
autocmd FileType ruby imap <buffer> <C-x>m <Plug>(seeing_is_believing-mark)

autocmd FileType ruby nmap <buffer> <C-x>c <Plug>(seeing_is_believing-clean)
autocmd FileType ruby xmap <buffer> <C-x>c <Plug>(seeing_is_believing-clean)
autocmd FileType ruby imap <buffer> <C-x>c <Plug>(seeing_is_believing-clean)

autocmd FileType ruby nmap <buffer> <C-x>r <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby xmap <buffer> <C-x>r <Plug>(seeing_is_believing-run_-x)
autocmd FileType ruby imap <buffer> <C-x>r <Plug>(seeing_is_believing-run_-x)

autocmd FileType javascript let b:syntastic_checkers = findfile('.eslintrc', '.;') != '' ? ['eslint'] : ['jshint']

set mouse=a
set ttymouse=xterm2

function FillInIvars()
  let find_initialize = "normal! ?def initialize\<CR>$""
  let put_word_as_ivar = "ywo@\<esc>pa = \<esc>p"
  execute find_initialize
  let c = 0
  while c < 10
    execute "normal! F,maw". put_word_as_ivar . "`a"
    let c += 1
  endwhile
  execute find_initialize
  execute "normal! F(l" . put_word_as_ivar
  execute "delmarks a"
endfunction
